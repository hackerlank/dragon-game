// GLSL shader autogenerated by dragon3d_cg2glsl.py.
#if defined(VERTEX)
// glesv output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -profile glesv -po version=120 -quiet
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glesv
//program main_vertex
//semantic main_vertex.modelViewProj
//var float4x4 modelViewProj :  : _modelViewProj1[0], 4 : 1 : 1
//var float4 position : $vin.POSITION : POSITION : 0 : 1
//var float4 oPosition : $vout.POSITION : HPOS : 2 : 1

precision mediump float;

vec4 _oPosition1;
uniform vec4 _modelViewProj1[4];
vec4 _r0005;
attribute vec4 POSITION;

 // main procedure, the original name was main_vertex
void main()
{


    _r0005 = POSITION.x*_modelViewProj1[0];
    _r0005 = _r0005 + POSITION.y*_modelViewProj1[1];
    _r0005 = _r0005 + POSITION.z*_modelViewProj1[2];
    _r0005 = _r0005 + POSITION.w*_modelViewProj1[3];
    _oPosition1 = _r0005;
    gl_Position = _r0005;
} // main end

#elif defined(FRAGMENT)
// glesf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -profile glesf -po version=120 -quiet
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glesf
//program main_fragment
//semantic main_fragment.color
//var float4 color :  : _color1 : 0 : 1
//var float4 main_fragment : $vout.COLOR : COL : -1 : 1

precision mediump float;

uniform vec4 _color1;

 // main procedure, the original name was main_fragment
void main()
{


    gl_FragColor = _color1;
    return;
} // main end

#endif
