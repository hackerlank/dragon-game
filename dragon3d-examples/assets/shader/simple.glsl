// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     vec4 _position1;
struct VertexOutput {
    vec4 _position1;
    vec4 _color;
};
struct FragmentOutput {
    vec4 _color1;
};
VertexOutput _ret_0;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_VARYING vec4 COL0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _ret_0._position1 = VertexCoord;
    _ret_0._color = vec4( 0.00000000E+00, 1.00000000E+00, 0.00000000E+00, 1.00000000E+00);
    gl_Position = VertexCoord;
    COL0 = vec4( 0.00000000E+00, 1.00000000E+00, 0.00000000E+00, 1.00000000E+00);
    return;
    COL0 = _ret_0._color;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color2;
COMPAT_VARYING     vec4 _color1;
struct VertexOutput {
    vec4 _color1;
};
struct FragmentOutput {
    vec4 _color2;
};
COMPAT_VARYING vec4 COL0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    FragColor = COL0;
    return;
} 
#endif
